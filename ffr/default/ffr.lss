
ffr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000578  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000017  00800100  00800100  000005ec  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000f9  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000237  00000000  00000000  00000705  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ef  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000035b  00000000  00000000  00000a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00000d88  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000146  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_1>
   8:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_2>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 c0 01 	jmp	0x380	; 0x380 <__vector_24>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a7 31       	cpi	r26, 0x17	; 23
  94:	b1 07       	cpc	r27, r17
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  9c:	0c 94 ba 02 	jmp	0x574	; 0x574 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <init>:

volatile uint16_t adc_value;
volatile uint8_t  bool_adc_done;

																
void init(void){
  a4:	df 93       	push	r29
  a6:	cf 93       	push	r28
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
	/* Init Pins */
	DDRA = 0x00;				// PORTA 0-3 -input (IR Inputs)
  ac:	e1 e2       	ldi	r30, 0x21	; 33
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1
	DDRC = 0x7F;				// PORTC 0-3 -output (Motor Outputs) 7 (PING) -output
  b2:	e7 e2       	ldi	r30, 0x27	; 39
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	8f e7       	ldi	r24, 0x7F	; 127
  b8:	80 83       	st	Z, r24
	DDRD = 0x32;				// PORTD 0,1 -output(serial) 2,3,6,7 -input (Encoder) 4[R]5[L]-output (PWM)
  ba:	ea e2       	ldi	r30, 0x2A	; 42
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	82 e3       	ldi	r24, 0x32	; 50
  c0:	80 83       	st	Z, r24
    DDRB = 0xFF;
  c2:	e4 e2       	ldi	r30, 0x24	; 36
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	80 83       	st	Z, r24
	
	/* Init INT */
	EIMSK = (1 << INT0)|(1 << INT1);
  ca:	ed e3       	ldi	r30, 0x3D	; 61
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	80 83       	st	Z, r24
    EICRA |= (1 << ISC00)|(1 << ISC01);
  d2:	a9 e6       	ldi	r26, 0x69	; 105
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	e9 e6       	ldi	r30, 0x69	; 105
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	83 60       	ori	r24, 0x03	; 3
  de:	8c 93       	st	X, r24
    EICRA |= (1 << ISC10)|(1 << ISC11);
  e0:	a9 e6       	ldi	r26, 0x69	; 105
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e9 e6       	ldi	r30, 0x69	; 105
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	8c 60       	ori	r24, 0x0C	; 12
  ec:	8c 93       	st	X, r24

	/* Init PWM */
    TCCR0A = (1<<COM0A1)|(1<<COM0B1)|(1<<WGM00)|(1<<WGM01);
  ee:	e4 e4       	ldi	r30, 0x44	; 68
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	83 ea       	ldi	r24, 0xA3	; 163
  f4:	80 83       	st	Z, r24
    TCCR0B = (1<<CS00);
  f6:	e5 e4       	ldi	r30, 0x45	; 69
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 83       	st	Z, r24
	OCR0A = 10;
  fe:	e7 e4       	ldi	r30, 0x47	; 71
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	80 83       	st	Z, r24
    OCR0B = 200;
 106:	e8 e4       	ldi	r30, 0x48	; 72
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	88 ec       	ldi	r24, 0xC8	; 200
 10c:	80 83       	st	Z, r24
    
	/* Init ADC */	
    //ADCSRA = 0xEB;				// changed to allow interrupt
    //ADMUX |= (1 << REFS0);		// AVCC with external capacitor at AREF pin
    //ADCSRA |= 0x10;				// clear flag
 ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescaler to 128 - 125KHz sample rate @ 16MHz 
 10e:	aa e7       	ldi	r26, 0x7A	; 122
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	ea e7       	ldi	r30, 0x7A	; 122
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	87 60       	ori	r24, 0x07	; 7
 11a:	8c 93       	st	X, r24

   ADMUX |= (1 << REFS0); // Set ADC reference to AVCC 
 11c:	ac e7       	ldi	r26, 0x7C	; 124
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	ec e7       	ldi	r30, 0x7C	; 124
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	80 64       	ori	r24, 0x40	; 64
 128:	8c 93       	st	X, r24

   // No MUX values needed to be changed to use ADC0 

   ADCSRA |= (1 << ADEN);  // Enable ADC 
 12a:	aa e7       	ldi	r26, 0x7A	; 122
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 68       	ori	r24, 0x80	; 128
 136:	8c 93       	st	X, r24

   ADCSRA |= (1 << ADIE);  // Enable ADC Interrupt 
 138:	aa e7       	ldi	r26, 0x7A	; 122
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	88 60       	ori	r24, 0x08	; 8
 144:	8c 93       	st	X, r24





}
 146:	cf 91       	pop	r28
 148:	df 91       	pop	r29
 14a:	08 95       	ret

0000014c <main>:
	
}
*/

int main(void)
{
 14c:	df 93       	push	r29
 14e:	cf 93       	push	r28
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
    init();
 154:	0e 94 52 00 	call	0xa4	; 0xa4 <init>
    /*
    USART_Init(MYUBRR);
    */
    //motorSTP();
    sei();
 158:	78 94       	sei
	readADC(1);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <readADC>
	...
	{
		asm("nop");
		asm("nop");
		asm("nop");
		asm("nop");
		asm("nop");
 16a:	00 00       	nop
		readADC(2);
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 f5 01 	call	0x3ea	; 0x3ea <readADC>
 174:	f6 cf       	rjmp	.-20     	; 0x162 <main+0x16>

00000176 <setMotorSpeed>:


}

/* Motor Control Functions */ //Funky needs checking
void setMotorSpeed(char c, int p){		// Set speed with a percentage
 176:	df 93       	push	r29
 178:	cf 93       	push	r28
 17a:	00 d0       	rcall	.+0      	; 0x17c <setMotorSpeed+0x6>
 17c:	00 d0       	rcall	.+0      	; 0x17e <setMotorSpeed+0x8>
 17e:	0f 92       	push	r0
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
 184:	8b 83       	std	Y+3, r24	; 0x03
 186:	7d 83       	std	Y+5, r23	; 0x05
 188:	6c 83       	std	Y+4, r22	; 0x04
	int s = 0;
 18a:	1a 82       	std	Y+2, r1	; 0x02
 18c:	19 82       	std	Y+1, r1	; 0x01
	
	if(p >= 0 && p <= 100){ 
 18e:	8c 81       	ldd	r24, Y+4	; 0x04
 190:	9d 81       	ldd	r25, Y+5	; 0x05
 192:	99 23       	and	r25, r25
 194:	ec f0       	brlt	.+58     	; 0x1d0 <setMotorSpeed+0x5a>
 196:	8c 81       	ldd	r24, Y+4	; 0x04
 198:	9d 81       	ldd	r25, Y+5	; 0x05
 19a:	85 36       	cpi	r24, 0x65	; 101
 19c:	91 05       	cpc	r25, r1
 19e:	c4 f4       	brge	.+48     	; 0x1d0 <setMotorSpeed+0x5a>
		s = (p * 255)/100;
 1a0:	4c 81       	ldd	r20, Y+4	; 0x04
 1a2:	5d 81       	ldd	r21, Y+5	; 0x05
 1a4:	ca 01       	movw	r24, r20
 1a6:	9c 01       	movw	r18, r24
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	c9 01       	movw	r24, r18
 1ae:	96 95       	lsr	r25
 1b0:	98 2f       	mov	r25, r24
 1b2:	88 27       	eor	r24, r24
 1b4:	97 95       	ror	r25
 1b6:	87 95       	ror	r24
 1b8:	82 1b       	sub	r24, r18
 1ba:	93 0b       	sbc	r25, r19
 1bc:	84 0f       	add	r24, r20
 1be:	95 1f       	adc	r25, r21
 1c0:	24 e6       	ldi	r18, 0x64	; 100
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	b9 01       	movw	r22, r18
 1c6:	0e 94 93 02 	call	0x526	; 0x526 <__divmodhi4>
 1ca:	cb 01       	movw	r24, r22
 1cc:	9a 83       	std	Y+2, r25	; 0x02
 1ce:	89 83       	std	Y+1, r24	; 0x01
	}	
	
	if(c == 'L') OCR1A = s;				// PORTD 5
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	8c 34       	cpi	r24, 0x4C	; 76
 1d4:	31 f4       	brne	.+12     	; 0x1e2 <setMotorSpeed+0x6c>
 1d6:	e8 e8       	ldi	r30, 0x88	; 136
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	9a 81       	ldd	r25, Y+2	; 0x02
 1de:	91 83       	std	Z+1, r25	; 0x01
 1e0:	80 83       	st	Z, r24
	if(c == 'R') OCR1B = s;				// PORTD 4
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	82 35       	cpi	r24, 0x52	; 82
 1e6:	31 f4       	brne	.+12     	; 0x1f4 <setMotorSpeed+0x7e>
 1e8:	ea e8       	ldi	r30, 0x8A	; 138
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	9a 81       	ldd	r25, Y+2	; 0x02
 1f0:	91 83       	std	Z+1, r25	; 0x01
 1f2:	80 83       	st	Z, r24
}
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	cf 91       	pop	r28
 200:	df 91       	pop	r29
 202:	08 95       	ret

00000204 <__vector_1>:
	}
	
	 return count;
}
*/
ISR(INT0_vect){
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
 21a:	df 93       	push	r29
 21c:	cf 93       	push	r28
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
    
    if(LENC0){
 222:	e9 e2       	ldi	r30, 0x29	; 41
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	88 2f       	mov	r24, r24
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	84 70       	andi	r24, 0x04	; 4
 22e:	90 70       	andi	r25, 0x00	; 0
 230:	00 97       	sbiw	r24, 0x00	; 0
 232:	e1 f1       	breq	.+120    	; 0x2ac <__vector_1+0xa8>
        if(!LENC1){          //Checks other right encoder
 234:	e9 e2       	ldi	r30, 0x29	; 41
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	88 2f       	mov	r24, r24
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	80 74       	andi	r24, 0x40	; 64
 240:	90 70       	andi	r25, 0x00	; 0
 242:	00 97       	sbiw	r24, 0x00	; 0
 244:	d1 f4       	brne	.+52     	; 0x27a <__vector_1+0x76>
            dirL = 1;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	90 93 01 01 	sts	0x0101, r25
 24e:	80 93 00 01 	sts	0x0100, r24
            countLF++;
 252:	80 91 02 01 	lds	r24, 0x0102
 256:	90 91 03 01 	lds	r25, 0x0103
 25a:	a0 91 04 01 	lds	r26, 0x0104
 25e:	b0 91 05 01 	lds	r27, 0x0105
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	a1 1d       	adc	r26, r1
 266:	b1 1d       	adc	r27, r1
 268:	80 93 02 01 	sts	0x0102, r24
 26c:	90 93 03 01 	sts	0x0103, r25
 270:	a0 93 04 01 	sts	0x0104, r26
 274:	b0 93 05 01 	sts	0x0105, r27
 278:	19 c0       	rjmp	.+50     	; 0x2ac <__vector_1+0xa8>
        }else{
            dirL = -1;
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	9f ef       	ldi	r25, 0xFF	; 255
 27e:	90 93 01 01 	sts	0x0101, r25
 282:	80 93 00 01 	sts	0x0100, r24
            countLR++;
 286:	80 91 06 01 	lds	r24, 0x0106
 28a:	90 91 07 01 	lds	r25, 0x0107
 28e:	a0 91 08 01 	lds	r26, 0x0108
 292:	b0 91 09 01 	lds	r27, 0x0109
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	a1 1d       	adc	r26, r1
 29a:	b1 1d       	adc	r27, r1
 29c:	80 93 06 01 	sts	0x0106, r24
 2a0:	90 93 07 01 	sts	0x0107, r25
 2a4:	a0 93 08 01 	sts	0x0108, r26
 2a8:	b0 93 09 01 	sts	0x0109, r27
        }
    }
    
}
 2ac:	cf 91       	pop	r28
 2ae:	df 91       	pop	r29
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	bf 91       	pop	r27
 2b6:	af 91       	pop	r26
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <__vector_2>:

ISR(INT1_vect){
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
 2d4:	af 93       	push	r26
 2d6:	bf 93       	push	r27
 2d8:	ef 93       	push	r30
 2da:	ff 93       	push	r31
 2dc:	df 93       	push	r29
 2de:	cf 93       	push	r28
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
    if(RENC0){
 2e4:	e9 e2       	ldi	r30, 0x29	; 41
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	88 2f       	mov	r24, r24
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	88 70       	andi	r24, 0x08	; 8
 2f0:	90 70       	andi	r25, 0x00	; 0
 2f2:	00 97       	sbiw	r24, 0x00	; 0
 2f4:	c1 f1       	breq	.+112    	; 0x366 <__vector_2+0xa0>
        if(!RENC1){          //Checks other right encoder
 2f6:	e9 e2       	ldi	r30, 0x29	; 41
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	88 23       	and	r24, r24
 2fe:	d4 f0       	brlt	.+52     	; 0x334 <__vector_2+0x6e>
            dirR = 1;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	90 93 0b 01 	sts	0x010B, r25
 308:	80 93 0a 01 	sts	0x010A, r24
            countRF++;
 30c:	80 91 0c 01 	lds	r24, 0x010C
 310:	90 91 0d 01 	lds	r25, 0x010D
 314:	a0 91 0e 01 	lds	r26, 0x010E
 318:	b0 91 0f 01 	lds	r27, 0x010F
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	a1 1d       	adc	r26, r1
 320:	b1 1d       	adc	r27, r1
 322:	80 93 0c 01 	sts	0x010C, r24
 326:	90 93 0d 01 	sts	0x010D, r25
 32a:	a0 93 0e 01 	sts	0x010E, r26
 32e:	b0 93 0f 01 	sts	0x010F, r27
 332:	19 c0       	rjmp	.+50     	; 0x366 <__vector_2+0xa0>
        }else{
            dirR = -1;
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	9f ef       	ldi	r25, 0xFF	; 255
 338:	90 93 0b 01 	sts	0x010B, r25
 33c:	80 93 0a 01 	sts	0x010A, r24
            countRR++;
 340:	80 91 10 01 	lds	r24, 0x0110
 344:	90 91 11 01 	lds	r25, 0x0111
 348:	a0 91 12 01 	lds	r26, 0x0112
 34c:	b0 91 13 01 	lds	r27, 0x0113
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	a1 1d       	adc	r26, r1
 354:	b1 1d       	adc	r27, r1
 356:	80 93 10 01 	sts	0x0110, r24
 35a:	90 93 11 01 	sts	0x0111, r25
 35e:	a0 93 12 01 	sts	0x0112, r26
 362:	b0 93 13 01 	sts	0x0113, r27
        }
    }
}
 366:	cf 91       	pop	r28
 368:	df 91       	pop	r29
 36a:	ff 91       	pop	r31
 36c:	ef 91       	pop	r30
 36e:	bf 91       	pop	r27
 370:	af 91       	pop	r26
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <__vector_24>:

ISR(ADC_vect) 
{ 
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
 38a:	8f 93       	push	r24
 38c:	9f 93       	push	r25
 38e:	af 93       	push	r26
 390:	bf 93       	push	r27
 392:	ef 93       	push	r30
 394:	ff 93       	push	r31
 396:	df 93       	push	r29
 398:	cf 93       	push	r28
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
	adc_value = ADC;
 39e:	e8 e7       	ldi	r30, 0x78	; 120
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	91 81       	ldd	r25, Z+1	; 0x01
 3a6:	90 93 15 01 	sts	0x0115, r25
 3aa:	80 93 14 01 	sts	0x0114, r24
	ADCSRA &= ~(1<<ADSC); // TURN OFF ADC
 3ae:	aa e7       	ldi	r26, 0x7A	; 122
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	ea e7       	ldi	r30, 0x7A	; 122
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	8f 7b       	andi	r24, 0xBF	; 191
 3ba:	8c 93       	st	X, r24
	ADCSRA &= ~(1<<ADIE);
 3bc:	aa e7       	ldi	r26, 0x7A	; 122
 3be:	b0 e0       	ldi	r27, 0x00	; 0
 3c0:	ea e7       	ldi	r30, 0x7A	; 122
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	87 7f       	andi	r24, 0xF7	; 247
 3c8:	8c 93       	st	X, r24
	bool_adc_done = 1;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	80 93 16 01 	sts	0x0116, r24
} 
 3d0:	cf 91       	pop	r28
 3d2:	df 91       	pop	r29
 3d4:	ff 91       	pop	r31
 3d6:	ef 91       	pop	r30
 3d8:	bf 91       	pop	r27
 3da:	af 91       	pop	r26
 3dc:	9f 91       	pop	r25
 3de:	8f 91       	pop	r24
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <readADC>:
    }
    return -1; // RETURN WITH ERROR
}*/

/* ADC Functions */
int readADC(int channel){		// PORT A
 3ea:	df 93       	push	r29
 3ec:	cf 93       	push	r28
 3ee:	00 d0       	rcall	.+0      	; 0x3f0 <readADC+0x6>
 3f0:	00 d0       	rcall	.+0      	; 0x3f2 <readADC+0x8>
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
 3f6:	9a 83       	std	Y+2, r25	; 0x02
 3f8:	89 83       	std	Y+1, r24	; 0x01
	bool_adc_done = 0;
 3fa:	10 92 16 01 	sts	0x0116, r1
	ADMUX  |= channel;
 3fe:	ac e7       	ldi	r26, 0x7C	; 124
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	ec e7       	ldi	r30, 0x7C	; 124
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	98 2f       	mov	r25, r24
 40a:	89 81       	ldd	r24, Y+1	; 0x01
 40c:	89 2b       	or	r24, r25
 40e:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);
 410:	aa e7       	ldi	r26, 0x7A	; 122
 412:	b0 e0       	ldi	r27, 0x00	; 0
 414:	ea e7       	ldi	r30, 0x7A	; 122
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	88 60       	ori	r24, 0x08	; 8
 41c:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);
 41e:	aa e7       	ldi	r26, 0x7A	; 122
 420:	b0 e0       	ldi	r27, 0x00	; 0
 422:	ea e7       	ldi	r30, 0x7A	; 122
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	80 64       	ori	r24, 0x40	; 64
 42a:	8c 93       	st	X, r24
 42c:	01 c0       	rjmp	.+2      	; 0x430 <readADC+0x46>
	while(bool_adc_done==0) asm("nop"); //Block till conversion's done
 42e:	00 00       	nop
 430:	80 91 16 01 	lds	r24, 0x0116
 434:	88 23       	and	r24, r24
 436:	d9 f3       	breq	.-10     	; 0x42e <readADC+0x44>
}
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	0f 90       	pop	r0
 440:	cf 91       	pop	r28
 442:	df 91       	pop	r29
 444:	08 95       	ret

00000446 <motorFWD>:

void motorFWD(void){				
 446:	df 93       	push	r29
 448:	cf 93       	push	r28
 44a:	cd b7       	in	r28, 0x3d	; 61
 44c:	de b7       	in	r29, 0x3e	; 62
	LM0(1);
 44e:	a8 e2       	ldi	r26, 0x28	; 40
 450:	b0 e0       	ldi	r27, 0x00	; 0
 452:	e8 e2       	ldi	r30, 0x28	; 40
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	81 60       	ori	r24, 0x01	; 1
 45a:	8c 93       	st	X, r24
	LM1(0);
 45c:	a8 e2       	ldi	r26, 0x28	; 40
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	e8 e2       	ldi	r30, 0x28	; 40
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	8d 7f       	andi	r24, 0xFD	; 253
 468:	8c 93       	st	X, r24
	LM1(0);
 46a:	a8 e2       	ldi	r26, 0x28	; 40
 46c:	b0 e0       	ldi	r27, 0x00	; 0
 46e:	e8 e2       	ldi	r30, 0x28	; 40
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	8d 7f       	andi	r24, 0xFD	; 253
 476:	8c 93       	st	X, r24
	RM0(0);
 478:	a8 e2       	ldi	r26, 0x28	; 40
 47a:	b0 e0       	ldi	r27, 0x00	; 0
 47c:	e8 e2       	ldi	r30, 0x28	; 40
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	8b 7f       	andi	r24, 0xFB	; 251
 484:	8c 93       	st	X, r24
	RM1(1);	
 486:	a8 e2       	ldi	r26, 0x28	; 40
 488:	b0 e0       	ldi	r27, 0x00	; 0
 48a:	e8 e2       	ldi	r30, 0x28	; 40
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	88 60       	ori	r24, 0x08	; 8
 492:	8c 93       	st	X, r24
}
 494:	cf 91       	pop	r28
 496:	df 91       	pop	r29
 498:	08 95       	ret

0000049a <motorRVS>:

void motorRVS(void){				
 49a:	df 93       	push	r29
 49c:	cf 93       	push	r28
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
	LM0(0);
 4a2:	a8 e2       	ldi	r26, 0x28	; 40
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	e8 e2       	ldi	r30, 0x28	; 40
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	8e 7f       	andi	r24, 0xFE	; 254
 4ae:	8c 93       	st	X, r24
	LM1(1);
 4b0:	a8 e2       	ldi	r26, 0x28	; 40
 4b2:	b0 e0       	ldi	r27, 0x00	; 0
 4b4:	e8 e2       	ldi	r30, 0x28	; 40
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	82 60       	ori	r24, 0x02	; 2
 4bc:	8c 93       	st	X, r24
	RM0(1);
 4be:	a8 e2       	ldi	r26, 0x28	; 40
 4c0:	b0 e0       	ldi	r27, 0x00	; 0
 4c2:	e8 e2       	ldi	r30, 0x28	; 40
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	84 60       	ori	r24, 0x04	; 4
 4ca:	8c 93       	st	X, r24
	RM1(0);	
 4cc:	a8 e2       	ldi	r26, 0x28	; 40
 4ce:	b0 e0       	ldi	r27, 0x00	; 0
 4d0:	e8 e2       	ldi	r30, 0x28	; 40
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 81       	ld	r24, Z
 4d6:	87 7f       	andi	r24, 0xF7	; 247
 4d8:	8c 93       	st	X, r24
}
 4da:	cf 91       	pop	r28
 4dc:	df 91       	pop	r29
 4de:	08 95       	ret

000004e0 <motorSTP>:

void motorSTP(){
 4e0:	df 93       	push	r29
 4e2:	cf 93       	push	r28
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
	LM0(0);
 4e8:	a8 e2       	ldi	r26, 0x28	; 40
 4ea:	b0 e0       	ldi	r27, 0x00	; 0
 4ec:	e8 e2       	ldi	r30, 0x28	; 40
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	8e 7f       	andi	r24, 0xFE	; 254
 4f4:	8c 93       	st	X, r24
	LM1(0);
 4f6:	a8 e2       	ldi	r26, 0x28	; 40
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	e8 e2       	ldi	r30, 0x28	; 40
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	8d 7f       	andi	r24, 0xFD	; 253
 502:	8c 93       	st	X, r24
	RM0(0);
 504:	a8 e2       	ldi	r26, 0x28	; 40
 506:	b0 e0       	ldi	r27, 0x00	; 0
 508:	e8 e2       	ldi	r30, 0x28	; 40
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	8b 7f       	andi	r24, 0xFB	; 251
 510:	8c 93       	st	X, r24
	RM1(0);
 512:	a8 e2       	ldi	r26, 0x28	; 40
 514:	b0 e0       	ldi	r27, 0x00	; 0
 516:	e8 e2       	ldi	r30, 0x28	; 40
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	87 7f       	andi	r24, 0xF7	; 247
 51e:	8c 93       	st	X, r24
}
 520:	cf 91       	pop	r28
 522:	df 91       	pop	r29
 524:	08 95       	ret

00000526 <__divmodhi4>:
 526:	97 fb       	bst	r25, 7
 528:	09 2e       	mov	r0, r25
 52a:	07 26       	eor	r0, r23
 52c:	0a d0       	rcall	.+20     	; 0x542 <__divmodhi4_neg1>
 52e:	77 fd       	sbrc	r23, 7
 530:	04 d0       	rcall	.+8      	; 0x53a <__divmodhi4_neg2>
 532:	0c d0       	rcall	.+24     	; 0x54c <__udivmodhi4>
 534:	06 d0       	rcall	.+12     	; 0x542 <__divmodhi4_neg1>
 536:	00 20       	and	r0, r0
 538:	1a f4       	brpl	.+6      	; 0x540 <__divmodhi4_exit>

0000053a <__divmodhi4_neg2>:
 53a:	70 95       	com	r23
 53c:	61 95       	neg	r22
 53e:	7f 4f       	sbci	r23, 0xFF	; 255

00000540 <__divmodhi4_exit>:
 540:	08 95       	ret

00000542 <__divmodhi4_neg1>:
 542:	f6 f7       	brtc	.-4      	; 0x540 <__divmodhi4_exit>
 544:	90 95       	com	r25
 546:	81 95       	neg	r24
 548:	9f 4f       	sbci	r25, 0xFF	; 255
 54a:	08 95       	ret

0000054c <__udivmodhi4>:
 54c:	aa 1b       	sub	r26, r26
 54e:	bb 1b       	sub	r27, r27
 550:	51 e1       	ldi	r21, 0x11	; 17
 552:	07 c0       	rjmp	.+14     	; 0x562 <__udivmodhi4_ep>

00000554 <__udivmodhi4_loop>:
 554:	aa 1f       	adc	r26, r26
 556:	bb 1f       	adc	r27, r27
 558:	a6 17       	cp	r26, r22
 55a:	b7 07       	cpc	r27, r23
 55c:	10 f0       	brcs	.+4      	; 0x562 <__udivmodhi4_ep>
 55e:	a6 1b       	sub	r26, r22
 560:	b7 0b       	sbc	r27, r23

00000562 <__udivmodhi4_ep>:
 562:	88 1f       	adc	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	5a 95       	dec	r21
 568:	a9 f7       	brne	.-22     	; 0x554 <__udivmodhi4_loop>
 56a:	80 95       	com	r24
 56c:	90 95       	com	r25
 56e:	bc 01       	movw	r22, r24
 570:	cd 01       	movw	r24, r26
 572:	08 95       	ret

00000574 <_exit>:
 574:	f8 94       	cli

00000576 <__stop_program>:
 576:	ff cf       	rjmp	.-2      	; 0x576 <__stop_program>
